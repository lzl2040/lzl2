---
layout: post
title:  程序设计实践-BFS算法
date:   2020-12-15 17:28:45 +0530
categories: 算法 程设 BFS
---
## 题目描述
定义一个二维数组： 
int a[5][5] = {  
0, 1, 0, 0, 0,  
0, 1, 0, 1, 0,  
0, 0, 0, 0, 0,  
0, 1, 1, 1, 0,  
0, 0, 0, 1, 0,  
};
迷宫数组a中间只有两种值1和0.其中的1表示不通的路，0表示可以走的路，只能横着走或竖着走，不能斜着走，要求编程序找出从左上角到右下角的最短路线。

## 解题思路
这题是求最短路径，但注意这是要把路径输出，而不是最短路径长，所以此时比较适合的算法为BFS，当其到达右下角时的路径即为最短路径。注意，因为要求路径，则还需定义一个结构体来存储坐标x,y，以及存储这个坐标的上一级的结构体指向front。  
之后路径的输出则需回溯输出。此外，还需注意迷宫的边界判断。
## 代码
```cpp
#include<stdio.h>
int map[7][7];
int dx[4] = {1,-1,0,0};//表示移动方向 
int dy[4] = {0,0,1,-1};
int minLen = 9999999;
int head = 0,tail=1;//tail为队列尾部 
//定义一个结构体来记录路径
struct path
{
	int x;
	int y;
	int front;//记录上一步 
}routine[10001];
void printPath(int head)
{
	while(routine[head].front!=-1)//没有回到最开始的位置 
	{
		printPath(routine[head].front);//继续回溯 
		printf("(%d,%d)\n",routine[head].x,routine[head].y);
		return;
	}
}
void bfs(int x,int y)//利用bfs算法求解最短路径 
{
	routine[head].x = 0;
	routine[head].y = 0;
	routine[head].front=-1;
	map[x][y]=1;//已经经历过
	while(head<tail)
	{
		if(routine[head].x==4&&routine[head].y==4)
		{
			printPath(head);
			return;
		}
		for(int i = 0;i<4;i++)
		{
			int mx = routine[head].x + dx[i];
			int my = routine[head].y + dy[i];
			//判断是否在这个区域内
			if(mx>=0&&mx<5&&my>=0&&my<5&&!map[mx][my])
			{
				//放进队列
				map[mx][my]=1;
				routine[tail].x = mx;
				routine[tail].y = my;
				routine[tail].front = head;
				tail++;//尾部向后移动一位	
			} 
		}
		head++;
	} 
}
int main()
{
	int i,j;
	for(i=0;i<5;i++)
	{
		for(j=0;j<5;j++)
		{
			scanf("%d",&map[i][j]);
		}
	}
	printf("(0,0)\n"); 
	bfs(0,0);
	return 0;
}
/*
0 1 0 0 0
0 1 0 1 0
0 0 0 0 0
0 1 1 1 0
0 0 0 1 0
*/
```
